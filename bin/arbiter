#!/usr/bin/env ruby
require 'rubygems'
require 'bundler/setup'
$:.unshift(File.expand_path('../../lib', File.realpath(__FILE__)))
require 'arbiter'
require 'json'
require 'yaml'
require 'shellwords'

cmd = ARGV.first
if cmd == 'start' then
  if RUBY_ENGINE == 'ruby' and !ENV['RUBY_THREAD_MACHINE_STACK_SIZE'] then
    ENV['RUBY_THREAD_MACHINE_STACK_SIZE'] = '1572864'
    exec('ruby', $0, *ARGV)
  end
  Arbiter.new.run
  exit
elsif cmd == 'check' then
  scripts_path = ENV['SCRIPTS_PATH'] || '/etc/arbiter.d'
  healthy = true
  message = ''
  Bundler.with_clean_env do
    Dir.entries(scripts_path).each do |fn|
      fp = "#{scripts_path}/#{fn}"
      next unless File.file?(fp) and File.executable?(fp)
      Timeout.timeout(5) do
        system(fp)
        status = $?.exitstatus
        if status > 0 then
          healthy = false
          message = "#{fn} exited with status=#{status.inspect}"
          break
        end
      end
    end
  end

  sock = UNIXSocket.new(ENV['SOCKET_PATH'] || '/var/run/arbiter.sock')
  sock.write("set #{healthy ? 'healthy' : 'unhealthy'} #{message}\n")
  output = sock.readline
  $stdout.puts if output[0] != "\n"

  exit 0 if healthy
  exit 1
elsif cmd == 'shlock' then
  sock = UNIXSocket.new(ENV['SOCKET_PATH'] || '/var/run/arbiter.sock')

  require 'timeout'

  args = ARGV[1..-1]
  if args.size > 0 and args[0].match(/^--wait=([\d\.]+)$/) then
    #TODO we need a real agument parser
    wait = $1.to_f
    args.shift
  else
    wait = 15 * 60
  end

  timeout = wait == 0 ? 60 : wait
  begin
    Timeout.timeout(timeout) do
      sock.write("lock pid=#{$$}\n")
      result = sock.readline.chomp
      pending = false

      if result == 'false' and wait == 0 then
        raise Timeout::Error
      end

      while result == 'false' do
        if !pending then
          pending = true
          $stderr.puts "Waiting for lock"
        end
        sock.write("status\n")
        $stderr.puts sock.readline.chomp
        sleep 2
        sock.write("lock pid=#{$$}\n")
        result = sock.readline.chomp
      end
    end
  rescue Timeout::Error => e
    abort 'Timeout while waiting for lock'
  end

  Bundler.with_clean_env do
    if args.size > 0 then
      if args.size == 1 and args.first.match(' ') then
        # looks to be a single argument that should be evaluated
        shargs = ['-c', args[0]]
      else
        # looks to be a command and arguments
        shargs = ['-c', Shellwords.shelljoin(args)]
      end
    else
      # no arguments, go interactive
      shargs = []
    end
    Bundler.with_clean_env do
      system(ENV['SHELL'] || '/bin/sh', *shargs)
    end
  end
  status = $?.exitstatus

  sock.close

  system('ruby', $0, 'check')

  exit status
elsif !cmd.nil? then
  sock = nil
  begin
    sock = UNIXSocket.new(ENV['SOCKET_PATH'] || '/var/run/arbiter.sock')
  rescue Errno::ENOENT, Errno::ECONNREFUSED => e
    abort "Arbiter daemon is not running"
  end
  sock.write(ARGV.join(' ') + "\n")
  $stdout.puts JSON.parse(sock.readline).to_yaml
else
  sock = UNIXSocket.new(ENV['SOCKET_PATH'] || '/var/run/arbiter.sock')
  loop do
    buf = ''
    ios = select([$stdin,sock])
    ios.first.each do |io|
      if io == $stdin then
        sock.write $stdin.read_nonblock(4096)
      else
        $stdout.write sock.read_nonblock(4096)
      end
    end
  end
end
